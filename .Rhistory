geomes <-     sf::st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
inters<- sf::st_intersection(geomes, squares[i,])
area<-0
areas<-0
if(length(inters)>0){
areas<- as.numeric(sf::st_area(inters))
area <- sum(areas)
}
mat3[i,2]<- as.integer(area)
aa<-aggregate(areas, by=list(category=inters$categoria), FUN=sum)
mat3[i,3]<-as.integer(aa$category[[which.max(aa$x)]])
mat3[i,4]<-as.integer(max(aa$x))
}
if( length(squares.intersecting.polys.dmg[[i]]) > 0 ){
geomes.dmg <- sf::st_make_valid(damages.for.myproj[squares.intersecting.polys.dmg[[i]],])
inters<-sf::st_intersection(geomes.dmg, squares[i,])
area<-0
if(length(inters)>0){
damage_deg <- ifelse(inters$Damage_deg < 0, 1, inters$Damage_deg )
area <- sum(as.numeric(sf::st_area(inters)))
warea <- sum(as.numeric(sf::st_area(inters)*damage_deg))
}
mat3[i,5] <- area
mat3[i,6] <- warea
}
NULL
}
)
options(warn = 0)
parallel::stopCluster(cl)
squares <- squares  %>% st_set_crs( myproj)
categ.for.myproj
squares.intersecting.polys<-st_intersects(squares, categ.for.myproj )
## read CATEGORIE -----
categ.for.myproj<-st_read("/archivio/shared/geodati/vettoriali/categorie_forestali_triveneto_crsCustomLCC.shp")
categ.for.myproj
damages.for.myproj
st_crs(categ.for.myproj)
st_crs(categ.for.myproj)==st_crs(squares)
categ.for.myproj <- categ.for.myproj %>% st_set_crs( myproj)
damages.for.myproj <- damages.for.myproj %>% st_set_crs( myproj)
squares.intersecting.polys<-st_intersects(squares, categ.for.myproj )
squares.intersecting.polys.ids<-which (lengths(squares.intersecting.polys) > 0 )
squares.intersecting.polys.dmg<-st_intersects(squares, damages.for.myproj )
squares.intersecting.polys.dmg.ids<-which (lengths(squares.intersecting.polys.dmg) > 0 )
squares.intersecting.eitherOr.IDS<-union(squares.intersecting.polys.dmg.ids, squares.intersecting.polys.ids)
##squares.intersecting.polys.ids<-squares.intersecting.polys.ids[1:100]
##shared matrix for output
cl <- parallel::makeForkCluster(14)
doParallel::registerDoParallel(cl)
#
# cut.Polygons.In.Squares <-
#   function(squares.intersecting.polys,
#            squares.intersecting.polys.dmg,
#            categ.for.myproj, damages.for.myproj, squares,
#            squares.intersecting.eitherOr.IDS) {
#
mat3 <- FBM(length(squares), 6, type="integer", init=NA)
options(warn = -1)
remove(i)
system.time(
tmp <- foreach(i = squares.intersecting.eitherOr.IDS,
.packages = c("sf", "lwgeom"))  %dopar%  {
mat3[i,1]<- i
if(length(squares.intersecting.polys[[i]]) > 0){
geomes <-     sf::st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
inters<- sf::st_intersection(geomes, squares[i,])
area<-0
areas<-0
if(length(inters)>0){
areas<- as.numeric(sf::st_area(inters))
area <- sum(areas)
}
mat3[i,2]<- as.integer(area)
aa<-aggregate(areas, by=list(category=inters$categoria), FUN=sum)
mat3[i,3]<-as.integer(aa$category[[which.max(aa$x)]])
mat3[i,4]<-as.integer(max(aa$x))
}
if( length(squares.intersecting.polys.dmg[[i]]) > 0 ){
geomes.dmg <- sf::st_make_valid(damages.for.myproj[squares.intersecting.polys.dmg[[i]],])
inters<-sf::st_intersection(geomes.dmg, squares[i,])
area<-0
if(length(inters)>0){
damage_deg <- ifelse(inters$Damage_deg < 0, 1, inters$Damage_deg )
area <- sum(as.numeric(sf::st_area(inters)))
warea <- sum(as.numeric(sf::st_area(inters)*damage_deg))
}
mat3[i,5] <- area
mat3[i,6] <- warea
}
NULL
}
)
options(warn = 0)
parallel::stopCluster(cl)
final.nodes <- st_read("out/fromGEEreducedVars/CNR_nodesWithGEEvars_crsLCCcustom.shp")
squares
squares.4326 <-  squares  %>% st_transform(4326)
final.nodes <- st_write("out/CNR_node_squares_crs4326.shp")
final.nodes <- st_write(squares.4326, "out/CNR_node_squares_crs4326.shp")
library(raster)
library(sf)
library(sp)
library(doParallel)
library(foreach)
library(bigstatsr)
library(bench)
library(lwgeom)
library(mapview)
library(bigmemory)
library(openxlsx)
rad2deg<-function(rad){ rad*180/pi}
deg2rad<-function(deg){ deg/180*pi}
cell_width<-500
wfolder<-"/archivio/shared/geodati/vettoriali/vaia/Cerrai_WRF_grid/"
myproj<-"+proj=lcc +lat_1=45.827  +lat_2=45.827  +lat_0=45.827 +lon_0=11.625 +x_0=4000000 +y_0=2800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
## read CATEGORIE -----
categ.for.myproj<-st_read("/archivio/shared/geodati/vettoriali/categorie_forestali_triveneto_crsCustomLCC.shp")
for ( i in  names(categ.for.myproj ) ){
if( !(i %in% c("fid", "categoria", "geometry"))  ) categ.for.myproj[[i]]<-NULL
}
categ.for.myproj <- categ.for.myproj %>% st_set_crs( myproj)
damages.for.myproj<-st_read("/archivio/shared/geodati/vettoriali/vaia/paperForzieriVAIA_crsLCCcustom_corrected.shp")
damages.for.myproj <- damages.for.myproj %>% st_set_crs( myproj)
damage.bbox<-st_as_sfc(st_bbox(damages.for.myproj))
### 1 km
# nodes <- st_read("out/fromGEEreducedVars/nodesWithGEEvars_crsLCCcustom.shp",
#                  query="SELECT FID FROM nodesWithGEEvars_crsLCCcustom")
nodes.df <-read.table("d02_xy_latlon.txt" )
nodes.df$V1<-NULL
names(nodes.df)<-c("FID", "lat", "lng")
View(nodes.df)
nodes<-st_as_sf(nodes.df, coords = c("lng","lat"))
nodes.myproj <-  nodes[,"geometry"]  %>% st_set_crs(4326)   %>% st_transform(myproj)
nodes.buffered<-st_buffer(nodes, 333.33333333, nQuadSegs = 1)
st_bbox_by_feature = function(x) {
x = st_geometry(x)
f <- function(y) st_as_sfc(st_bbox(y,), crs=myproj)
do.call("c", lapply(x, f))
}
squares <-st_bbox_by_feature(nodes.buffered)
squares <- squares  %>% st_set_crs( myproj)
squares.intersecting.polys<-st_intersects(squares, categ.for.myproj )
squares.intersecting.polys.ids<-which (lengths(squares.intersecting.polys) > 0 )
squares.intersecting.polys.dmg<-st_intersects(squares, damages.for.myproj )
squares.intersecting.polys.dmg.ids<-which (lengths(squares.intersecting.polys.dmg) > 0 )
squares.intersecting.eitherOr.IDS<-union(squares.intersecting.polys.dmg.ids, squares.intersecting.polys.ids)
##squares.intersecting.polys.ids<-squares.intersecting.polys.ids[1:100]
squares
squares.4326 <-  squares  %>% st_transform(4326)
st_write(squares.4326, "out/CNR_node_squares_crs4326.shp")
st_write(squares.4326, "out/CNR_node_squares_crs4326.shp", append=F)
cl <- parallel::makeForkCluster(14)
doParallel::registerDoParallel(cl)
#
# cut.Polygons.In.Squares <-
#   function(squares.intersecting.polys,
#            squares.intersecting.polys.dmg,
#            categ.for.myproj, damages.for.myproj, squares,
#            squares.intersecting.eitherOr.IDS) {
#
mat3 <- FBM(length(squares), 6, type="integer", init=NA)
options(warn = -1)
remove(i)
system.time(
tmp <- foreach(i = squares.intersecting.eitherOr.IDS,
.packages = c("sf", "lwgeom"))  %dopar%  {
mat3[i,1]<- i
if(length(squares.intersecting.polys[[i]]) > 0){
geomes <-     sf::st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
inters<- sf::st_intersection(geomes, squares[i,])
area<-0
areas<-0
if(length(inters)>0){
areas<- as.numeric(sf::st_area(inters))
area <- sum(areas)
}
mat3[i,2]<- as.integer(area)
aa<-aggregate(areas, by=list(category=inters$categoria), FUN=sum)
mat3[i,3]<-as.integer(aa$category[[which.max(aa$x)]])
mat3[i,4]<-as.integer(max(aa$x))
}
if( length(squares.intersecting.polys.dmg[[i]]) > 0 ){
geomes.dmg <- sf::st_make_valid(damages.for.myproj[squares.intersecting.polys.dmg[[i]],])
inters<-sf::st_intersection(geomes.dmg, squares[i,])
area<-0
if(length(inters)>0){
damage_deg <- ifelse(inters$Damage_deg < 0, 1, inters$Damage_deg )
area <- sum(as.numeric(sf::st_area(inters)))
warea <- sum(as.numeric(sf::st_area(inters)*damage_deg))
}
mat3[i,5] <- area
mat3[i,6] <- warea
}
NULL
}
)
options(warn = 0)
parallel::stopCluster(cl)
plot(nodes.buffered[1:12,])
nodes.buffered[1:12,]
plot(nodes[1:12,])
mapview(nodes[1:14,])
mapview() + mapview(nodes[1:14,])
mapview() + mapview(nodes[1:14,]) + mapview(nodes.buffered)
mapview() + mapview(nodes[1:14,]) + mapview(nodes.buffered[1:14,])
nodes.buffered<-st_buffer(nodes.myproj, 333.33333333, nQuadSegs = 1)
st_bbox_by_feature = function(x) {
x = st_geometry(x)
f <- function(y) st_as_sfc(st_bbox(y,), crs=myproj)
do.call("c", lapply(x, f))
}
mapview() + mapview(nodes[1:14,]) + mapview(nodes.buffered)
mapview() + mapview(nodes[1:14,]) + mapview(nodes.buffered[1:14,])
squares <-st_bbox_by_feature(nodes.buffered)
squares <- squares  %>% st_set_crs( myproj)
squares.intersecting.polys<-st_intersects(squares, categ.for.myproj )
squares.intersecting.polys.ids<-which (lengths(squares.intersecting.polys) > 0 )
squares.intersecting.polys.dmg<-st_intersects(squares, damages.for.myproj )
squares.intersecting.polys.dmg.ids<-which (lengths(squares.intersecting.polys.dmg) > 0 )
squares.intersecting.eitherOr.IDS<-union(squares.intersecting.polys.dmg.ids, squares.intersecting.polys.ids)
##squares.intersecting.polys.ids<-squares.intersecting.polys.ids[1:100]
##shared matrix for output
squares.4326 <-  squares  %>% st_transform(4326)
st_write(squares.4326, "out/CNR_node_squares_crs4326.shp", append=F)
######## DO GEE STUFF HERE!
cl <- parallel::makeForkCluster(14)
doParallel::registerDoParallel(cl)
#
# cut.Polygons.In.Squares <-
#   function(squares.intersecting.polys,
#            squares.intersecting.polys.dmg,
#            categ.for.myproj, damages.for.myproj, squares,
#            squares.intersecting.eitherOr.IDS) {
#
mat3 <- FBM(length(squares), 6, type="integer", init=NA)
options(warn = -1)
remove(i)
system.time(
tmp <- foreach(i = squares.intersecting.eitherOr.IDS,
.packages = c("sf", "lwgeom"))  %dopar%  {
mat3[i,1]<- i
if(length(squares.intersecting.polys[[i]]) > 0){
geomes <-     sf::st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
inters<- sf::st_intersection(geomes, squares[i,])
area<-0
areas<-0
if(length(inters)>0){
areas<- as.numeric(sf::st_area(inters))
area <- sum(areas)
}
mat3[i,2]<- as.integer(area)
aa<-aggregate(areas, by=list(category=inters$categoria), FUN=sum)
mat3[i,3]<-as.integer(aa$category[[which.max(aa$x)]])
mat3[i,4]<-as.integer(max(aa$x))
}
if( length(squares.intersecting.polys.dmg[[i]]) > 0 ){
geomes.dmg <- sf::st_make_valid(damages.for.myproj[squares.intersecting.polys.dmg[[i]],])
inters<-sf::st_intersection(geomes.dmg, squares[i,])
area<-0
if(length(inters)>0){
damage_deg <- ifelse(inters$Damage_deg < 0, 1, inters$Damage_deg )
area <- sum(as.numeric(sf::st_area(inters)))
warea <- sum(as.numeric(sf::st_area(inters)*damage_deg))
}
mat3[i,5] <- area
mat3[i,6] <- warea
}
NULL
}
)
options(warn = 0)
parallel::stopCluster(cl)
mat3[]
squares.sf<- st_as_sf(squares, data.frame(FID=nodes.myproj2$FID) )
squares.sf<- st_as_sf(squares, data.frame(FID=nodes.myproj$FID) )
nodes.myproj$FID
?st_as_sf
nodes<-st_as_sf(nodes , coords = c("lng","lat"))
nodes<-st_as_sf(nodes.df , coords = c("lng","lat"))
nodes <-st_as_sf(nodes.df , coords = c("lng","lat"))
nodes.myproj <-  nodes[,"geometry"]  %>% st_set_crs(4326)   %>% st_transform(myproj)
nodes.myproj <-  nodes  %>% st_set_crs(4326)   %>% st_transform(myproj)
nodes.buffered<-st_buffer(nodes.myproj, 333.33333333, nQuadSegs = 1)
st_bbox_by_feature = function(x) {
x = st_geometry(x)
f <- function(y) st_as_sfc(st_bbox(y,), crs=myproj)
do.call("c", lapply(x, f))
}
mapview() + mapview(nodes[1:14,]) + mapview(nodes.buffered[1:14,])
squares <-st_bbox_by_feature(nodes.buffered)
squares <- squares  %>% st_set_crs( myproj)
squares.4326 <-  squares  %>% st_transform(4326)
st_write(squares.4326, "out/CNR_node_squares_crs4326.shp", append=F)
######## DO GEE STUFF HERE!
#squares.sf<- st_as_sf(squares, data.frame(FID=nodes.myproj2$FID) )
squares.intersecting.polys<-st_intersects(squares, categ.for.myproj )
squares.intersecting.polys.ids<-which (lengths(squares.intersecting.polys) > 0 )
squares.intersecting.polys.dmg<-st_intersects(squares, damages.for.myproj )
squares.intersecting.polys.dmg.ids<-which (lengths(squares.intersecting.polys.dmg) > 0 )
squares.intersecting.eitherOr.IDS<-union(squares.intersecting.polys.dmg.ids, squares.intersecting.polys.ids)
##squares.intersecting.polys.ids<-squares.intersecting.polys.ids[1:100]
##shared matrix for output
cl <- parallel::makeForkCluster(14)
doParallel::registerDoParallel(cl)
#
# cut.Polygons.In.Squares <-
#   function(squares.intersecting.polys,
#            squares.intersecting.polys.dmg,
#            categ.for.myproj, damages.for.myproj, squares,
#            squares.intersecting.eitherOr.IDS) {
#
mat3 <- FBM(length(squares), 6, type="integer", init=NA)
options(warn = -1)
remove(i)
system.time(
tmp <- foreach(i = squares.intersecting.eitherOr.IDS,
.packages = c("sf", "lwgeom"))  %dopar%  {
mat3[i,1]<- i
if(length(squares.intersecting.polys[[i]]) > 0){
geomes <-     sf::st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
inters<- sf::st_intersection(geomes, squares[i,])
area<-0
areas<-0
if(length(inters)>0){
areas<- as.numeric(sf::st_area(inters))
area <- sum(areas)
}
mat3[i,2]<- as.integer(area)
aa<-aggregate(areas, by=list(category=inters$categoria), FUN=sum)
mat3[i,3]<-as.integer(aa$category[[which.max(aa$x)]])
mat3[i,4]<-as.integer(max(aa$x))
}
if( length(squares.intersecting.polys.dmg[[i]]) > 0 ){
geomes.dmg <- sf::st_make_valid(damages.for.myproj[squares.intersecting.polys.dmg[[i]],])
inters<-sf::st_intersection(geomes.dmg, squares[i,])
area<-0
if(length(inters)>0){
damage_deg <- ifelse(inters$Damage_deg < 0, 1, inters$Damage_deg )
area <- sum(as.numeric(sf::st_area(inters)))
warea <- sum(as.numeric(sf::st_area(inters)*damage_deg))
}
mat3[i,5] <- area
mat3[i,6] <- warea
}
NULL
}
)
options(warn = 0)
parallel::stopCluster(cl)
final.nodes <- st_read("out/fromGEEreducedVars/CNR_nodesWithGEEvars_crsLCCcustom.shp")
mat4<-mat3[]
colnames(mat4)<-c("rown", "cat_Cov", "mainCat", "mainCat_Cov", "dmg_Cov", "dmg_wCov")
dt4<-as.data.frame(mat4)
?st_bind_cols
squares$FID<-nodes.buffered$FID
View(squares)
squares.4326 <-  squares  %>% st_transform(4326)
squares <-st_bbox_by_feature(nodes.buffered)
squares.p <- cbind(squares, nodes.buffered$FID)
squares.p <- st_bind_cols(squares, nodes.buffered$FID)
squares.p <- st_sf(squares, nodes.buffered$FID)
squares.p <- squares.p  %>% st_set_crs( myproj)
squares.4326 <-  squares.p  %>% st_transform(4326)
squares.p <- st_sf(squares, FID=nodes.buffered$FID)
squares.p <- squares.p  %>% st_set_crs( myproj)
squares.4326 <-  squares.p  %>% st_transform(4326)
squares.4326$FID
nodes.buffered$FID
nodes.df <-read.table("d02_xy_latlon.txt" )
View(nodes.df)
View(nodes.df)
nodes.df <-read.table("d02_xy_latlon.txt" )
nodes.df$V1<-NULL
nodes.df$V2<-NULL
names(nodes.df)<-c("lat", "lng")
nodes <-st_as_sf(nodes.df , coords = c("lng","lat"))
nodes.myproj <-  nodes  %>% st_set_crs(4326)   %>% st_transform(myproj)
nodes.buffered<-st_buffer(nodes.myproj, 333.33333333, nQuadSegs = 1)
st_bbox_by_feature = function(x) {
x2 = st_geometry(x)
f <- function(y) st_as_sfc(st_bbox(y,), crs=myproj)
do.call("c", lapply(x2, f))
}
mapview() + mapview(nodes[1:14,]) + mapview(nodes.buffered[1:14,])
nrow(nodes.df)
nodes <-st_as_sf(nodes.df , coords = c("lng","lat"), FID=1:nrow(nodes.df))
nodes <-st_as_sf(nodes.df , coords = c("lng","lat") )
nodes$FID<-1:nrow(nodes.df)
nodes.myproj <-  nodes  %>% st_set_crs(4326)   %>% st_transform(myproj)
nodes.buffered<-st_buffer(nodes.myproj, 333.33333333, nQuadSegs = 1)
st_bbox_by_feature = function(x) {
x2 = st_geometry(x)
f <- function(y) st_as_sfc(st_bbox(y,), crs=myproj)
do.call("c", lapply(x2, f))
}
mapview() + mapview(nodes[1:14,]) + mapview(nodes.buffered[1:14,])
squares <-st_bbox_by_feature(nodes.buffered)
squares <- squares  %>% st_set_crs( myproj)
squares.4326 <-  squares.p  %>% st_transform(4326)
st_write(squares.4326 , "out/CNR_node_squares_crs4326.shp", append=F)
squares.intersecting.polys<-st_intersects(squares, categ.for.myproj )
squares.intersecting.polys.ids<-which (lengths(squares.intersecting.polys) > 0 )
squares.intersecting.polys.dmg<-st_intersects(squares, damages.for.myproj )
squares.intersecting.polys.dmg.ids<-which (lengths(squares.intersecting.polys.dmg) > 0 )
squares.intersecting.eitherOr.IDS<-union(squares.intersecting.polys.dmg.ids, squares.intersecting.polys.ids)
##squares.intersecting.polys.ids<-squares.intersecting.polys.ids[1:100]
##shared matrix for output
squares.intersecting.eitherOr.IDS
sf::st_area(squares[1,])
as.numeric(sf::st_area(squares[1,]))
squares.intersecting.polys<-st_intersects(squares, categ.for.myproj )
squares.intersecting.polys.ids<-which (lengths(squares.intersecting.polys) > 0 )
squares.intersecting.polys.dmg<-st_intersects(squares, damages.for.myproj )
squares.intersecting.polys.dmg.ids<-which (lengths(squares.intersecting.polys.dmg) > 0 )
squares.intersecting.eitherOr.IDS<-union(squares.intersecting.polys.dmg.ids, squares.intersecting.polys.ids)
##squares.intersecting.polys.ids<-squares.intersecting.polys.ids[1:100]
##shared matrix for output
single.tile.area <- as.numeric(sf::st_area(squares[1,]))
cl <- parallel::makeForkCluster(14)
doParallel::registerDoParallel(cl)
#
# cut.Polygons.In.Squares <-
#   function(squares.intersecting.polys,
#            squares.intersecting.polys.dmg,
#            categ.for.myproj, damages.for.myproj, squares,
#            squares.intersecting.eitherOr.IDS) {
#
mat3 <- FBM(length(squares), 6, type="integer", init=NA)
options(warn = -1)
remove(i)
system.time(
tmp <- foreach(i = squares.intersecting.eitherOr.IDS,
.packages = c("sf", "lwgeom"))  %dopar%  {
mat3[i,1]<- i
if(length(squares.intersecting.polys[[i]]) > 0){
geomes <-     sf::st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
inters<- sf::st_intersection(geomes, squares[i,])
area<-0
areas<-0
if(length(inters)>0){
areas<- as.numeric(sf::st_area(inters))
area <- sum(areas)
}
mat3[i,2]<- as.integer(area / single.tile.area * 100 )
aa<-aggregate(areas, by=list(category=inters$categoria), FUN=sum)
mat3[i,3]<-as.integer(aa$category[[which.max(aa$x)]])
mat3[i,4]<-as.integer(max(aa$x) / single.tile.area * 100 )
}
if( length(squares.intersecting.polys.dmg[[i]]) > 0 ){
geomes.dmg <- sf::st_make_valid(damages.for.myproj[squares.intersecting.polys.dmg[[i]],])
inters<-sf::st_intersection(geomes.dmg, squares[i,])
area<-0
if(length(inters)>0){
damage_deg <- ifelse(inters$Damage_deg < 0, 1, inters$Damage_deg )
area <- sum(as.numeric(sf::st_area(inters)))
warea <- sum(as.numeric(sf::st_area(inters)*damage_deg))
}
mat3[i,5] <- as.integer(area / single.tile.area * 100)
mat3[i,6] <- as.integer(warea / single.tile.area * 100)
}
NULL
}
)
options(warn = 0)
parallel::stopCluster(cl)
mat4<-mat3[]
colnames(mat4)<-c("rown", "cat_Cv", "mainCat", "mnCt_Cv", "dmg_Cv", "dmg_wCv")
dt4<-as.data.frame(mat4)
dt4$FID<- nodes.buffered$FID[ dt4$rown ]
View(dt4)
#
# cut.Polygons.In.Squares <-
#   function(squares.intersecting.polys,
#            squares.intersecting.polys.dmg,
#            categ.for.myproj, damages.for.myproj, squares,
#            squares.intersecting.eitherOr.IDS) {
#
mat3 <- FBM(length(squares), 7, type="integer", init=NA)
mat3[,7]<-nodes.buffered$FID
dt4$FID<- nodes.buffered$FID
View(dt4)
squares.4326$FID
squares.4326 <-  squares  %>% st_transform(4326)
nodes.myproj$FID
squares.sf<- st_as_sf(squares, data.frame(FID=nodes.myproj$FID) )
squares.4326 <-  squares.sf  %>% st_transform(4326)
st_write(squares.4326 , "out/CNR_node_squares_crs4326.shp", append=F)
final.nodes <- st_read("out/fromGEEreducedVars/CNR_nodesWithGEEvars_crsLCCcustom.shp")
final.nodes.4326 <- st_read("out/fromGEEreducedVars/CNR_nodesWithGEEvars_crs4326.shp")
final.nodes <- final.nodes.4326 %>% st_transform(myproj)
final.nodes.binded<- st_bind_cols(final.nodes, dt4)
st_write(final.nodes.binded, "out/fromGEEreducedVars/CNR_nodesWithGEEvars_andRvar_crsLCCcustom.shp", append = F)
st_write(final.nodes.binded %>% st_transform(4326),
"out/fromGEEreducedVars/CNR_nodesWithGEEvars_andRvar_crs4326.shp", append=F)
final.nodes.binded<- st_bind_cols(final.nodes, dt4)
View(final.nodes.binded)
final.nodes.binded<- merge(final.nodes, dt4)
View(final.nodes.binded)
st_write(final.nodes.binded, "out/fromGEEreducedVars/CNR_nodesWithGEEvars_andRvar_crsLCCcustom.shp", append = F)
st_write(final.nodes.binded %>% st_transform(4326),
"out/fromGEEreducedVars/CNR_nodesWithGEEvars_andRvar_crs4326.shp", append=F)
final.nodes.binded.df <- as.data.frame(final.nodes.binded)
final.nodes.binded.df <- final.nodes.binded.df[ , -which(names(final.nodes.binded.df) %in% c("FID", "geometry", "mainCat") ) ]
final.nodes.binded.df <- as.data.frame(final.nodes.binded )
final.nodes.binded.df <- final.nodes.binded.df[ , -which(names(final.nodes.binded.df ) %in% c("FID", "geometry", "mainCat") ) ]
final.nodes.binded.df <- final.nodes.binded.df[ , sort(names(final.nodes.binded.df)) ]
cor.matrix<-cor(final.nodes.binded.df , use="pairwise.complete.obs")
write.xlsx(cor.matrix, "cor.matrix.xlsx", withFilter =T, rowNames=T )
dt4
oo<-read.csv("/archivio/home/pirotti/Google Drive/CNR_copernicus.csv")
View(oo)
